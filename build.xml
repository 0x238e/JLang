<project name="polyllvm" default="compile-all" basedir=".">
    <description>
      PolyLLVM build file
    </description>


    <!-- ****************************************
       set global properties for this build
       ****************************************  -->

    <!-- extension package name -->
    <property name="package.dir" value="polyllvm"/>

    <!-- extension language name -->
    <property name="name" value="polyllvm"/>

    <!-- extension compiler script name -->
    <property name="compiler.name" value="${name}c"/>

    <!-- extension interpreter script name -->
    <property name="interp.sh.name" value="${name}"/>

    <!-- jar file names -->
    <property name="runtime.jar.name" value="${name}-rt.jar"/>
    <property name="compiler.jar.name" value="${name}.jar"/>

    <!-- source directory -->
    <property name="compiler.src" location="${basedir}/compiler/src" />

    <!-- directory for class file targets -->
    <property name="compiler.classes" location="${basedir}/compiler/classes" />

    <!-- binaries directory -->
    <property name="bin.dir" location="${basedir}/bin" />

    <!-- directory for shared libraries -->
    <property name="lib.dir" location="${basedir}/lib" />

    <!-- runtime source directory -->
    <property name="runtime.src" location="${basedir}/runtime/src" />

    <!-- directory for class file targets of runtime source code -->
    <property name="runtime.classes" location="${basedir}/runtime/classes" />

    <!-- distribution directory -->
    <property name="dist" location="${basedir}/dist" />

    <property name="compiler.sh" location="${bin.dir}/${compiler.name}"/>
    <property name="compiler.bat" location="${bin.dir}/${compiler.name}.bat"/>
    <property name="interp.sh" location="${bin.dir}/${interp.sh.name}"/>
    <property name="compiler.jar" location="${lib.dir}/${compiler.jar.name}"/>
    <property name="runtime.jar" location="${lib.dir}/${runtime.jar.name}"/>

    <!-- set the prefix for accessing environment variables -->
    <property environment="env" />

    <!-- the standard classpath -->
    <path id="standard.classpath">
        <!-- our generated classes -->
        <pathelement location="${compiler.classes}" />
        <pathelement location="${runtime.classes}" />

        <!-- the java classpath -->
        <pathelement path="${java.class.path}" />

        <!-- jar files in the lib directory, excluding generated jars -->
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
            <exclude name="${name}.jar" />
            <exclude name="${name}-rt.jar" />
        </fileset>
    </path>


    <!-- ****************************************
       Clean up targets and other admin tasks
       ****************************************  -->
    <target name="clean" description="clean up">
        <!-- Delete the ${compiler.classes} and ${dist} directory trees -->
        <delete dir="${compiler.classes}" />
        <delete dir="${runtime.classes}" />
        <exec executable="make" dir="${basedir}/runtime">
            <arg value="clean" />
        </exec>
        <delete dir="${dist}" />
        <delete includeemptydirs="true">
            <fileset dir="${basedir}/tests">
                <include name="**/*.class" />
                <include name="**/*~" />
                <include name="pthOutput*/**/*" />
                <include name="pthOutput*" />
            </fileset>
        </delete>
    </target>

    <target name="clobber" depends="clean" description="removes all generated files">
        <delete includeemptydirs="true">
            <fileset dir="${compiler.src}">
                <include name="**/Grm.java" />
                <include name="**/sym.java" />
                <include name="**/Lexer_c.java" />
                <include name="**/*_ppg.cup" />
            </fileset>
            <fileset dir="${lib.dir}">
                <include name="${compiler.jar.name}" />
                <include name="${runtime.jar.name}" />
            </fileset>
        </delete>
        <delete file="${interp.sh}" />
        <delete file="${compiler.sh}" />
        <delete file="${compiler.bat}" />
    </target>

    <!-- initialize the build -->
    <target name="init">
        <!-- Create the time stamp -->
        <tstamp />
        <!-- Create the build directory structures used by compile -->
        <mkdir dir="${compiler.classes}" />
        <mkdir dir="${runtime.classes}" />
        <!-- Check if runtime exists -->
        <condition property="has-runtime">
            <available file="${runtime.src}" type="dir"/>
        </condition>
    </target>


    <!-- ****************************************
       Configuration
       ****************************************  -->
    <target name="check-classpath" description="Check the classpath contains the appropriate directories/jars">
        <available classname="polyglot.main.Main"
	               classpathref="standard.classpath"
	               property="cp_existence.polyglot"/>
        <fail unless="cp_existence.polyglot"
	          message="The polyglot classes must be on the classpath. Try adding polyglot.jar to the classpath."/>
    </target>

    <!-- ****************************************
       targets
       ****************************************  -->

    <target name="compile-all" depends="compiler,runtime" description="Build the compiler and libraries"/>

    <target name="compiler" depends="init,check-classpath">
        <antcall target="compile-ext">
            <param name="ext" value="${name}" />
            <param name="ext.pkg" value="${package.dir}" />
        </antcall>
    </target>

    <target name="runtime" depends="init,check-classpath" description="Compile the runtime" if="has-runtime">
        <mkdir dir="${runtime.classes}" />
        <javac source="1.7" target="1.7" srcdir="${runtime.src}" destdir="${runtime.classes}" debug="on" includes="**" includeantruntime="false">
            <classpath>
                <path refid="standard.classpath" />
            </classpath>
        </javac>
        <exec executable="make">
            <arg value="PREBUILT=true"/>
            <arg value="-C"/>
            <arg value="runtime"/>
        </exec>
    </target>


    <!-- ****************************************
       Javadoc and distribution targets
       ****************************************  -->

    <target name="jar" depends="compile-all">
        <jar jarfile="${compiler.jar}" basedir="${compiler.classes}" includes="${package.dir}/**" />
        <jar jarfile="${runtime.jar}" basedir="${runtime.classes}" includes="${package.dir}/**" />
    </target>


    <target name="javadoc" depends="compiler">
        <javadoc sourcepath="${compiler.src}" destdir="${basedir}/doc/${name}-api" defaultexcludes="yes" classpathref="standard.classpath">
            <packageset dir="${compiler.src}" defaultexcludes="yes">
                <include name="**" />
            </packageset>
        </javadoc>
        <javadoc sourcepath="${runtime.src}" destdir="${basedir}/doc/${name}-runtime-api" defaultexcludes="yes" classpathref="standard.classpath">
          <packageset dir="${runtime.src}" defaultexcludes="yes">
                <include name="**" />
            </packageset>
        </javadoc>
    </target>

    <!-- generate the distribution -->
    <target name="dist" description="generate the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}" />

        <!-- Clobber everything so we're in a clean state -->
        <antcall target="clobber" />

        <!-- Copy src files over. -->
        <copy todir="${dist}" includeEmptyDirs="no">
            <fileset dir="${basedir}" defaultexcludes="yes">
                <include name="compiler/src/**" />
                <include name="runtime/src/**" />

                <include name="tests/*" />
                <include name="README" />
                <include name="LICENSE" />
                <include name="CHANGES" />
                <include name="build.xml" />
            </fileset>
        </copy>

        <!-- Create the Javadoc, and copy the documentation -->
        <antcall target="javadoc" />
        <copy todir="${dist}" includeEmptyDirs="no">
            <fileset dir="${basedir}" defaultexcludes="yes">
                <include name="doc/*api/**" />
                <include name="doc/*.html" />
                <include name="doc/*.css" />
            </fileset>
        </copy>

        <!-- Create the jar files and copy all the jars over -->
        <antcall target="jar" />
        <copy todir="${dist}" includeEmptyDirs="no">
            <fileset dir="${basedir}" defaultexcludes="yes">
                <include name="lib/*.jar" />
            </fileset>
        </copy>

    </target>



    <!-- ****************************************
       "Reusable" targets
       ****************************************  -->

    <!-- compile a single extension.
       @param ${ext}         the name of the extension
       @param ${ext.pkg}     the package directory of the extension
    -->
    <target name="compile-ext">
        <javac source="1.8" target="1.8" srcdir="${compiler.src}" destdir="${compiler.classes}" debug="on" includes="${ext.pkg}/**" includeantruntime="false">
            <classpath refid="standard.classpath" />
        </javac>
    </target>

</project>

