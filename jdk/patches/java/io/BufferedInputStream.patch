--- openjdk-7-src.orig/java/io/BufferedInputStream.java	2013-01-04 14:04:02.000000000 -0500
+++ openjdk-7-src/java/io/BufferedInputStream.java	2018-05-13 17:23:39.000000000 -0400
@@ -59,16 +59,7 @@
      */
     protected volatile byte buf[];
 
-    /**
-     * Atomic updater to provide compareAndSet for buf. This is
-     * necessary because closes can be asynchronous. We use nullness
-     * of buf[] as primary indicator that this stream is closed. (The
-     * "in" field is also nulled out on close.)
-     */
-    private static final
-        AtomicReferenceFieldUpdater<BufferedInputStream, byte[]> bufUpdater =
-        AtomicReferenceFieldUpdater.newUpdater
-        (BufferedInputStream.class,  byte[].class, "buf");
+    // Modified for PolyLLVM.
 
     /**
      * The index one greater than the index of the last valid byte in
@@ -221,14 +212,7 @@
                     nsz = marklimit;
                 byte nbuf[] = new byte[nsz];
                 System.arraycopy(buffer, 0, nbuf, 0, pos);
-                if (!bufUpdater.compareAndSet(this, buffer, nbuf)) {
-                    // Can't replace buf if there was an async close.
-                    // Note: This would need to be changed if fill()
-                    // is ever made accessible to multiple threads.
-                    // But for now, the only way CAS can fail is via close.
-                    // assert buf == null;
-                    throw new IOException("Stream closed");
-                }
+                // Modified for PolyLLVM.
                 buffer = nbuf;
             }
         count = pos;
@@ -465,14 +449,12 @@
     public void close() throws IOException {
         byte[] buffer;
         while ( (buffer = buf) != null) {
-            if (bufUpdater.compareAndSet(this, buffer, null)) {
-                InputStream input = in;
-                in = null;
-                if (input != null)
-                    input.close();
-                return;
-            }
-            // Else retry in case a new buf was CASed in fill()
+            // Modified for PolyLLVM.
+            InputStream input = in;
+            in = null;
+            if (input != null)
+                input.close();
+            return;
         }
     }
 }
